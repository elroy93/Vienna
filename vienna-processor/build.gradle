plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'java'
    id 'base'
    id 'maven-publish'
    id "jacoco"
    id 'checkstyle'
}

group 'com.tencent'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    maven {
        url "https://mirrors.tencent.com/repository/maven/vienna"
    }
    mavenCentral()
    mavenLocal()
    google()
    flatDir {
        dirs = [new File(System.getenv("JAVA_HOME") + '\\lib')]
    }

}

configurations {
    all*.exclude group: "ch.qos.logback"
    all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
    implementation 'com.google.auto:auto-common:1.2.1'
    implementation 'com.google.auto.value:auto-value:1.9'

    implementation 'cn.hutool:hutool-all:5.7.18'

    compileOnly 'sun.jdk:tools:1.0'

    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'com.google.guava:guava:31.0.1-jre'

    // 编译测试
    testImplementation 'com.google.testing.compile:compile-testing:0.19'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'sun.jdk:tools:1.0'
}

// ############################# javac的编译配置 #############################

compileJava {
    if (JavaVersion.current().ordinal() > JavaVersion.VERSION_1_8.ordinal()) {
        options.compilerArgs.addAll(["--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"])
        options.compilerArgs.addAll(["--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED"])
    }
    options.encoding("UTF-8")
}

//编译参数
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
//        options.compilerArgs << "-Xlint"
//                << "-verbose"
    }
}

configurations.all {
    //每隔24小时检查远程依赖是否存在更新
    resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
}

// ############################# 打包配置 #############################

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            def releasesRepoUrl = "https://mirrors.tencent.com/repository/maven/vienna"
            def snapshotsRepoUrl = "https://mirrors.tencent.com/repository/maven/vienna"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username "elroysu"
                password "fef81e3051d411ec934466801c693e69"
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

// #####################################################################

test {
    useJUnitPlatform()
}


